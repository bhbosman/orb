// Code generated by me. DO NOT EDIT.

package IOP

import __goidl__ "github.com/bhbosman/goidl"

// TypeDef declaration: "IOP::ComponentData", generatedBy by: "WriteTypeDefOfSequenceDcl"
//Typedef Sequence declaration: IOP::ComponentData
type IopComponentData []byte

//noinspection GoSnakeCaseUsage
type IopComponentData_Helper struct {
}

//noinspection GoSnakeCaseUsage
const IopComponentDataId_Const = "IDL:omg.org/IOP/ComponentData:1.0"

func (self IopComponentData_Helper) Id() string {
	return IopComponentDataId_Const
}

// WriteTypeDefOfSequenceDcl::WriteExtract
func (self IopComponentData_Helper) Read(stream __goidl__.IReadAny) (IopComponentData, error) {
	n, err := __goidl__.IdlUInt32Helper.Read(stream)
	if err != nil {
		return nil, err
	}
	if n > 0 {
		result := make(IopComponentData, n)
		var i uint32
		for i = 0; i < n; i++ {
			result[i], err = __goidl__.IdlOctetHelper.Read(stream)
			if err != nil {
				return nil, err
			}
		}
		return result, nil
	}
	return nil, nil
}

func (self IopComponentData_Helper) Write(stream __goidl__.IWriteAny, v IopComponentData) error {
	if v == nil {
		return __goidl__.IdlUInt32Helper.Write(stream, 0)
	}
	err := __goidl__.IdlUInt32Helper.Write(stream, uint32(len(v)))
	if err != nil {
		return nil
	}
	for _, item := range v {
			err = __goidl__.IdlOctetHelper.Write(stream, item)
		if err != nil {
			return err
		}
	}
	return err
}


//noinspection GoUnusedGlobalVariable
var IopComponentDataHelper = IopComponentData_Helper{}

func init() {
}
