// Code generated by me. DO NOT EDIT.

package omg

import __fmt__ "fmt"
import __goidl__ "github.com/bhbosman/goidl"
import __json__ "encoding/json"
import __reflect__ "reflect"
import __yaccidl__ "github.com/bhbosman/yaccidl"

// Enum declaration: "CosConcurrencyControl::lock_mode", generatedBy by: "WriteEnumDcl"
type CosConcurrencyControlLockMode uint32

//noinspection GoUnusedConst
const (
	CosConcurrencyControlLockModeRead           CosConcurrencyControlLockMode = 0
	CosConcurrencyControlLockModeWrite          CosConcurrencyControlLockMode = 1
	CosConcurrencyControlLockModeUpgrade        CosConcurrencyControlLockMode = 2
	CosConcurrencyControlLockModeIntentionRead  CosConcurrencyControlLockMode = 3
	CosConcurrencyControlLockModeIntentionWrite CosConcurrencyControlLockMode = 4
)

//noinspection GoSnakeCaseUsage
type CosConcurrencyControlLockMode_Helper struct {
}

//noinspection GoSnakeCaseUsage
const CosConcurrencyControlLockModeId_Const = "IDL:omg.org/CosConcurrencyControl/lock_mode:1.0"

func (self CosConcurrencyControlLockMode_Helper) Id() string {
	return CosConcurrencyControlLockModeId_Const
}

func (self CosConcurrencyControlLockMode_Helper) Read(stream __goidl__.IReadAny) (uint32, error) {
	result, err := __goidl__.IdlUInt32Helper.Read(stream)
	return result, err
}

func (self CosConcurrencyControlLockMode_Helper) Write(stream __goidl__.IWriteAny, v uint32) error {
	return __goidl__.IdlUInt32Helper.Write(stream, v)
}

// Exception declaration: "CosConcurrencyControl::LockNotHeld", generatedBy by: "WriteStructDcl"
// Exception Decl: true
type CosConcurrencyControlLockNotHeld struct {
	__goidl__.IdlObject
}

//noinspection GoSnakeCaseUsage
const CosConcurrencyControlLockNotHeldId_Const = "IDL:omg.org/CosConcurrencyControl/LockNotHeld:1.0"

//noinspection GoUnusedExportedFunction
func NewDefaultCosConcurrencyControlLockNotHeld() *CosConcurrencyControlLockNotHeld {
	//noinspection GoRedundantConversion
	return &CosConcurrencyControlLockNotHeld{
		IdlObject: __goidl__.IdlObject{
			Id: CosConcurrencyControlLockNotHeldId_Const,
		},
	}
}

//noinspection GoUnusedExportedFunction
func NewCosConcurrencyControlLockNotHeld() *CosConcurrencyControlLockNotHeld {
	//noinspection GoRedundantConversion
	return &CosConcurrencyControlLockNotHeld{
		IdlObject: __goidl__.IdlObject{
			Id: CosConcurrencyControlLockNotHeldId_Const,
		},
	}
}

//noinspection GoUnusedExportedFunction
func NewRandomCosConcurrencyControlLockNotHeld() *CosConcurrencyControlLockNotHeld {
	//noinspection GoRedundantConversion
	return &CosConcurrencyControlLockNotHeld{
		IdlObject: __goidl__.IdlObject{
			Id: CosConcurrencyControlLockNotHeldId_Const,
		},
	}
}

func (self *CosConcurrencyControlLockNotHeld) String() string {
	b, err := __json__.Marshal(self)
	if err != nil {
		return ""
	}
	return string(b)
}

func (self *CosConcurrencyControlLockNotHeld) Error() string{
	return 	__fmt__.Sprintf("Error of type CosConcurrencyControlLockNotHeld(%v)", self.String())
}
func (self *CosConcurrencyControlLockNotHeld) GoString() string {
	return self.String()
}

func (self *CosConcurrencyControlLockNotHeld) ReadValue(stream __goidl__.IReadAny) error {
	var err error
	err = self.IdlObject.ReadValue(stream)
	if err != nil {
		return err
	}
	return nil
}

func (self *CosConcurrencyControlLockNotHeld) Read(stream __goidl__.IReadAny) error {
	err := self.ReadValue(stream)
	if err != nil {
		return err
	}
	return nil
}

func (self *CosConcurrencyControlLockNotHeld) Write(stream __goidl__.IWriteAny) error {
	var err error
	err = self.IdlObject.Write(stream)
	if err != nil {
		return err
	}
	return nil
}

//noinspection GoSnakeCaseUsage
type CosConcurrencyControlLockNotHeld_Helper struct {
}

// Interface declaration: "CosConcurrencyControl::LockCoordinator", generatedBy by: "WriteInterface"
type CosConcurrencyControlLockCoordinator interface {
	// Interface operations
	// Original name: "drop_locks"
	DropLocks() (error error)
}

//noinspection GoSnakeCaseUsage
type CosConcurrencyControlLockCoordinator_Helper struct {
}

//noinspection GoSnakeCaseUsage
const CosConcurrencyControlLockCoordinatorId_Const = "IDL:omg.org/CosConcurrencyControl/LockCoordinator:1.0"

func (self CosConcurrencyControlLockCoordinator_Helper) Id() string {
	return CosConcurrencyControlLockCoordinatorId_Const
}

func (self CosConcurrencyControlLockCoordinator_Helper) Read(stream __goidl__.IReadAny) (CosConcurrencyControlLockCoordinator, error) {
	return nil, nil
}

func (self CosConcurrencyControlLockCoordinator_Helper) Write(stream __goidl__.IWriteAny, v CosConcurrencyControlLockCoordinator) error {
	return nil
}

// Interface declaration: "CosConcurrencyControl::LockSet", generatedBy by: "WriteInterface"
type CosConcurrencyControlLockSet interface {
	// Interface operations
	// Original name: "lock"
	Lock(Mode uint32) (error error)
	// Original name: "try_lock"
	TryLock(Mode uint32) (result bool, err error)
	//Exceptions for : Unlock
	//	CosConcurrencyControlLockNotHeld
	// Original name: "unlock"
	Unlock(Mode uint32) (error error)
	//Exceptions for : ChangeMode
	//	CosConcurrencyControlLockNotHeld
	// Original name: "change_mode"
	ChangeMode(HeldMode uint32, NewMode uint32) (error error)
	// Original name: "get_coordinator"
	GetCoordinator(Which CosTransactionsCoordinator) (result CosConcurrencyControlLockCoordinator, err error)
}

//noinspection GoSnakeCaseUsage
type CosConcurrencyControlLockSet_Helper struct {
}

//noinspection GoSnakeCaseUsage
const CosConcurrencyControlLockSetId_Const = "IDL:omg.org/CosConcurrencyControl/LockSet:1.0"

func (self CosConcurrencyControlLockSet_Helper) Id() string {
	return CosConcurrencyControlLockSetId_Const
}

func (self CosConcurrencyControlLockSet_Helper) Read(stream __goidl__.IReadAny) (CosConcurrencyControlLockSet, error) {
	return nil, nil
}

func (self CosConcurrencyControlLockSet_Helper) Write(stream __goidl__.IWriteAny, v CosConcurrencyControlLockSet) error {
	return nil
}

// Interface declaration: "CosConcurrencyControl::TransactionalLockSet", generatedBy by: "WriteInterface"
type CosConcurrencyControlTransactionalLockSet interface {
	// Interface operations
	// Original name: "lock"
	Lock(Current CosTransactionsCoordinator, Mode uint32) (error error)
	// Original name: "try_lock"
	TryLock(Current CosTransactionsCoordinator, Mode uint32) (result bool, err error)
	//Exceptions for : Unlock
	//	CosConcurrencyControlLockNotHeld
	// Original name: "unlock"
	Unlock(Current CosTransactionsCoordinator, Mode uint32) (error error)
	//Exceptions for : ChangeMode
	//	CosConcurrencyControlLockNotHeld
	// Original name: "change_mode"
	ChangeMode(Current CosTransactionsCoordinator, HeldMode uint32, NewMode uint32) (error error)
	// Original name: "get_coordinator"
	GetCoordinator(Which CosTransactionsCoordinator) (result CosConcurrencyControlLockCoordinator, err error)
}

//noinspection GoSnakeCaseUsage
type CosConcurrencyControlTransactionalLockSet_Helper struct {
}

//noinspection GoSnakeCaseUsage
const CosConcurrencyControlTransactionalLockSetId_Const = "IDL:omg.org/CosConcurrencyControl/TransactionalLockSet:1.0"

func (self CosConcurrencyControlTransactionalLockSet_Helper) Id() string {
	return CosConcurrencyControlTransactionalLockSetId_Const
}

func (self CosConcurrencyControlTransactionalLockSet_Helper) Read(stream __goidl__.IReadAny) (CosConcurrencyControlTransactionalLockSet, error) {
	return nil, nil
}

func (self CosConcurrencyControlTransactionalLockSet_Helper) Write(stream __goidl__.IWriteAny, v CosConcurrencyControlTransactionalLockSet) error {
	return nil
}

// Interface declaration: "CosConcurrencyControl::LockSetFactory", generatedBy by: "WriteInterface"
type CosConcurrencyControlLockSetFactory interface {
	// Interface operations
	// Original name: "create"
	Create() (result CosConcurrencyControlLockSet, err error)
	// Original name: "create_related"
	CreateRelated(Which CosConcurrencyControlLockSet) (result CosConcurrencyControlLockSet, err error)
	// Original name: "create_transactional"
	CreateTransactional() (result CosConcurrencyControlTransactionalLockSet, err error)
	// Original name: "create_transactional_related"
	CreateTransactionalRelated(Which CosConcurrencyControlTransactionalLockSet) (result CosConcurrencyControlTransactionalLockSet, err error)
}

//noinspection GoSnakeCaseUsage
type CosConcurrencyControlLockSetFactory_Helper struct {
}

//noinspection GoSnakeCaseUsage
const CosConcurrencyControlLockSetFactoryId_Const = "IDL:omg.org/CosConcurrencyControl/LockSetFactory:1.0"

func (self CosConcurrencyControlLockSetFactory_Helper) Id() string {
	return CosConcurrencyControlLockSetFactoryId_Const
}

func (self CosConcurrencyControlLockSetFactory_Helper) Read(stream __goidl__.IReadAny) (CosConcurrencyControlLockSetFactory, error) {
	return nil, nil
}

func (self CosConcurrencyControlLockSetFactory_Helper) Write(stream __goidl__.IWriteAny, v CosConcurrencyControlLockSetFactory) error {
	return nil
}


//noinspection GoUnusedGlobalVariable
var CosConcurrencyControlLockModeHelper = CosConcurrencyControlLockMode_Helper{}

//noinspection GoUnusedGlobalVariable
var CosConcurrencyControlLockNotHeldHelper = CosConcurrencyControlLockNotHeld_Helper{}

//noinspection GoUnusedGlobalVariable
var CosConcurrencyControlLockCoordinatorHelper = CosConcurrencyControlLockCoordinator_Helper{}

//noinspection GoUnusedGlobalVariable
var CosConcurrencyControlLockSetHelper = CosConcurrencyControlLockSet_Helper{}

//noinspection GoUnusedGlobalVariable
var CosConcurrencyControlTransactionalLockSetHelper = CosConcurrencyControlTransactionalLockSet_Helper{}

//noinspection GoUnusedGlobalVariable
var CosConcurrencyControlLockSetFactoryHelper = CosConcurrencyControlLockSetFactory_Helper{}

func init() {
	__goidl__.AddRegistration(
		__goidl__.NewRegistrationInformation(
			CosConcurrencyControlLockNotHeldId_Const,
			__yaccidl__.IdlStruct,
			"CosConcurrencyControl.idl.go",
			func() __goidl__.IIdlObject {
				return NewDefaultCosConcurrencyControlLockNotHeld()
			},
			func(generator __goidl__.IRandomDataGenerator) __goidl__.IIdlObject {
				return NewDefaultCosConcurrencyControlLockNotHeld()
			},
			__reflect__.TypeOf((*CosConcurrencyControlLockNotHeld)(nil))))
}
