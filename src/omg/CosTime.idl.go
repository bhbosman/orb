// Code generated by me. DO NOT EDIT.

package omg

import __fmt__ "fmt"
import __goidl__ "github.com/bhbosman/goidl"
import __json__ "encoding/json"
import __reflect__ "reflect"
import __yaccidl__ "github.com/bhbosman/yaccidl"

// Enum declaration: "CosTime::TimeComparison", generatedBy by: "WriteEnumDcl"
type CosTimeTimeComparison uint32

//noinspection GoUnusedConst
const (
	CosTimeTimeComparisonTCEqualTo       CosTimeTimeComparison = 0
	CosTimeTimeComparisonTCLessThan      CosTimeTimeComparison = 1
	CosTimeTimeComparisonTCGreaterThan   CosTimeTimeComparison = 2
	CosTimeTimeComparisonTCIndeterminate CosTimeTimeComparison = 3
)

//noinspection GoSnakeCaseUsage
type CosTimeTimeComparison_Helper struct {
}

//noinspection GoSnakeCaseUsage
const CosTimeTimeComparisonId_Const = "IDL:omg.org/CosTime/TimeComparison:1.0"

func (self CosTimeTimeComparison_Helper) Id() string {
	return CosTimeTimeComparisonId_Const
}

func (self CosTimeTimeComparison_Helper) Read(stream __goidl__.IReadAny) (uint32, error) {
	result, err := __goidl__.IdlUInt32Helper.Read(stream)
	return result, err
}

func (self CosTimeTimeComparison_Helper) Write(stream __goidl__.IWriteAny, v uint32) error {
	return __goidl__.IdlUInt32Helper.Write(stream, v)
}

// Enum declaration: "CosTime::ComparisonType", generatedBy by: "WriteEnumDcl"
type CosTimeComparisonType uint32

//noinspection GoUnusedConst
const (
	CosTimeComparisonTypeIntervalC CosTimeComparisonType = 0
	CosTimeComparisonTypeMidC      CosTimeComparisonType = 1
)

//noinspection GoSnakeCaseUsage
type CosTimeComparisonType_Helper struct {
}

//noinspection GoSnakeCaseUsage
const CosTimeComparisonTypeId_Const = "IDL:omg.org/CosTime/ComparisonType:1.0"

func (self CosTimeComparisonType_Helper) Id() string {
	return CosTimeComparisonTypeId_Const
}

func (self CosTimeComparisonType_Helper) Read(stream __goidl__.IReadAny) (uint32, error) {
	result, err := __goidl__.IdlUInt32Helper.Read(stream)
	return result, err
}

func (self CosTimeComparisonType_Helper) Write(stream __goidl__.IWriteAny, v uint32) error {
	return __goidl__.IdlUInt32Helper.Write(stream, v)
}

// Enum declaration: "CosTime::OverlapType", generatedBy by: "WriteEnumDcl"
type CosTimeOverlapType uint32

//noinspection GoUnusedConst
const (
	CosTimeOverlapTypeOTContainer CosTimeOverlapType = 0
	CosTimeOverlapTypeOTContained CosTimeOverlapType = 1
	CosTimeOverlapTypeOTOverlap   CosTimeOverlapType = 2
	CosTimeOverlapTypeOTNoOverlap CosTimeOverlapType = 3
)

//noinspection GoSnakeCaseUsage
type CosTimeOverlapType_Helper struct {
}

//noinspection GoSnakeCaseUsage
const CosTimeOverlapTypeId_Const = "IDL:omg.org/CosTime/OverlapType:1.0"

func (self CosTimeOverlapType_Helper) Id() string {
	return CosTimeOverlapTypeId_Const
}

func (self CosTimeOverlapType_Helper) Read(stream __goidl__.IReadAny) (uint32, error) {
	result, err := __goidl__.IdlUInt32Helper.Read(stream)
	return result, err
}

func (self CosTimeOverlapType_Helper) Write(stream __goidl__.IWriteAny, v uint32) error {
	return __goidl__.IdlUInt32Helper.Write(stream, v)
}

// Exception declaration: "CosTime::TimeUnavailable", generatedBy by: "WriteStructDcl"
// Exception Decl: true
type CosTimeTimeUnavailable struct {
	__goidl__.IdlObject
}

//noinspection GoSnakeCaseUsage
const CosTimeTimeUnavailableId_Const = "IDL:omg.org/CosTime/TimeUnavailable:1.0"

//noinspection GoUnusedExportedFunction
func NewDefaultCosTimeTimeUnavailable() *CosTimeTimeUnavailable {
	//noinspection GoRedundantConversion
	return &CosTimeTimeUnavailable{
		IdlObject: __goidl__.IdlObject{
			Id: CosTimeTimeUnavailableId_Const,
		},
	}
}

//noinspection GoUnusedExportedFunction
func NewCosTimeTimeUnavailable() *CosTimeTimeUnavailable {
	//noinspection GoRedundantConversion
	return &CosTimeTimeUnavailable{
		IdlObject: __goidl__.IdlObject{
			Id: CosTimeTimeUnavailableId_Const,
		},
	}
}

//noinspection GoUnusedExportedFunction
func NewRandomCosTimeTimeUnavailable() *CosTimeTimeUnavailable {
	//noinspection GoRedundantConversion
	return &CosTimeTimeUnavailable{
		IdlObject: __goidl__.IdlObject{
			Id: CosTimeTimeUnavailableId_Const,
		},
	}
}

func (self *CosTimeTimeUnavailable) String() string {
	b, err := __json__.Marshal(self)
	if err != nil {
		return ""
	}
	return string(b)
}

func (self *CosTimeTimeUnavailable) Error() string{
	return 	__fmt__.Sprintf("Error of type CosTimeTimeUnavailable(%v)", self.String())
}
func (self *CosTimeTimeUnavailable) GoString() string {
	return self.String()
}

func (self *CosTimeTimeUnavailable) ReadValue(stream __goidl__.IReadAny) error {
	var err error
	err = self.IdlObject.ReadValue(stream)
	if err != nil {
		return err
	}
	return nil
}

func (self *CosTimeTimeUnavailable) Read(stream __goidl__.IReadAny) error {
	err := self.ReadValue(stream)
	if err != nil {
		return err
	}
	return nil
}

func (self *CosTimeTimeUnavailable) Write(stream __goidl__.IWriteAny) error {
	var err error
	err = self.IdlObject.Write(stream)
	if err != nil {
		return err
	}
	return nil
}

//noinspection GoSnakeCaseUsage
type CosTimeTimeUnavailable_Helper struct {
}

// Interface declaration: "CosTime::UTO", generatedBy by: "WriteInterface"
type CosTimeUto interface {
	// Interface operations
	// Original name: "absolute_time"
	AbsoluteTime() (result CosTimeUto, err error)
	// Original name: "compare_time"
	CompareTime(ComparisonType uint32, Uto CosTimeUto) (result uint32, err error)
	// Original name: "time_to_interval"
	TimeToInterval(Uto CosTimeUto) (result CosTimeTio, err error)
	// Original name: "interval"
	Interval() (result CosTimeTio, err error)
	// Property Time
	// Get Property Time
	GetTime() (uint64, error)
	// Property Inaccuracy
	// Get Property Inaccuracy
	GetInaccuracy() (uint64, error)
	// Property Tdf
	// Get Property Tdf
	GetTdf() (int16, error)
	// Property UtcTime
	// Get Property UtcTime
	GetUtcTime() (TimeBaseUtcT, error)
}

//noinspection GoSnakeCaseUsage
type CosTimeUto_Helper struct {
}

//noinspection GoSnakeCaseUsage
const CosTimeUtoId_Const = "IDL:omg.org/CosTime/UTO:1.0"

func (self CosTimeUto_Helper) Id() string {
	return CosTimeUtoId_Const
}

func (self CosTimeUto_Helper) Read(stream __goidl__.IReadAny) (CosTimeUto, error) {
	return nil, nil
}

func (self CosTimeUto_Helper) Write(stream __goidl__.IWriteAny, v CosTimeUto) error {
	return nil
}

// Interface declaration: "CosTime::TIO", generatedBy by: "WriteInterface"
type CosTimeTio interface {
	// Interface operations
	// Original name: "spans"
	Spans(Time CosTimeUto) (Overlap CosTimeTio, result uint32, err error)
	// Original name: "overlaps"
	Overlaps(Interval CosTimeTio) (Overlap CosTimeTio, result uint32, err error)
	// Original name: "time"
	Time() (result CosTimeUto, err error)
	// Property TimeInterval
	// Get Property TimeInterval
	GetTimeInterval() (TimeBaseIntervalT, error)
}

//noinspection GoSnakeCaseUsage
type CosTimeTio_Helper struct {
}

//noinspection GoSnakeCaseUsage
const CosTimeTioId_Const = "IDL:omg.org/CosTime/TIO:1.0"

func (self CosTimeTio_Helper) Id() string {
	return CosTimeTioId_Const
}

func (self CosTimeTio_Helper) Read(stream __goidl__.IReadAny) (CosTimeTio, error) {
	return nil, nil
}

func (self CosTimeTio_Helper) Write(stream __goidl__.IWriteAny, v CosTimeTio) error {
	return nil
}

// Interface declaration: "CosTime::TimeService", generatedBy by: "WriteInterface"
type CosTimeTimeService interface {
	// Interface operations
	//Exceptions for : UniversalTime
	//	CosTimeTimeUnavailable
	// Original name: "universal_time"
	UniversalTime() (result CosTimeUto, err error)
	//Exceptions for : SecureUniversalTime
	//	CosTimeTimeUnavailable
	// Original name: "secure_universal_time"
	SecureUniversalTime() (result CosTimeUto, err error)
	// Original name: "new_universal_time"
	NewUniversalTime(Time uint64, Inaccuracy uint64, Tdf int16) (result CosTimeUto, err error)
	// Original name: "uto_from_utc"
	UtoFromUtc(Utc *TimeBaseUtcT) (result CosTimeUto, err error)
	// Original name: "new_interval"
	NewInterval(Lower uint64, Upper uint64) (result CosTimeTio, err error)
}

//noinspection GoSnakeCaseUsage
type CosTimeTimeService_Helper struct {
}

//noinspection GoSnakeCaseUsage
const CosTimeTimeServiceId_Const = "IDL:omg.org/CosTime/TimeService:1.0"

func (self CosTimeTimeService_Helper) Id() string {
	return CosTimeTimeServiceId_Const
}

func (self CosTimeTimeService_Helper) Read(stream __goidl__.IReadAny) (CosTimeTimeService, error) {
	return nil, nil
}

func (self CosTimeTimeService_Helper) Write(stream __goidl__.IWriteAny, v CosTimeTimeService) error {
	return nil
}


//noinspection GoUnusedGlobalVariable
var CosTimeTimeComparisonHelper = CosTimeTimeComparison_Helper{}

//noinspection GoUnusedGlobalVariable
var CosTimeComparisonTypeHelper = CosTimeComparisonType_Helper{}

//noinspection GoUnusedGlobalVariable
var CosTimeOverlapTypeHelper = CosTimeOverlapType_Helper{}

//noinspection GoUnusedGlobalVariable
var CosTimeTimeUnavailableHelper = CosTimeTimeUnavailable_Helper{}

//noinspection GoUnusedGlobalVariable
var CosTimeUtoHelper = CosTimeUto_Helper{}

//noinspection GoUnusedGlobalVariable
var CosTimeTioHelper = CosTimeTio_Helper{}

//noinspection GoUnusedGlobalVariable
var CosTimeTimeServiceHelper = CosTimeTimeService_Helper{}

func init() {
	__goidl__.AddRegistration(
		__goidl__.NewRegistrationInformation(
			CosTimeTimeUnavailableId_Const,
			__yaccidl__.IdlStruct,
			"CosTime.idl.go",
			func() __goidl__.IIdlObject {
				return NewDefaultCosTimeTimeUnavailable()
			},
			func(generator __goidl__.IRandomDataGenerator) __goidl__.IIdlObject {
				return NewDefaultCosTimeTimeUnavailable()
			},
			__reflect__.TypeOf((*CosTimeTimeUnavailable)(nil))))
}
