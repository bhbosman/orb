// Code generated by me. DO NOT EDIT.

package omg

import __fmt__ "fmt"
import __goidl__ "github.com/bhbosman/goidl"
import __json__ "encoding/json"
import __reflect__ "reflect"
import __yaccidl__ "github.com/bhbosman/yaccidl"

// TypeDef declaration: "CORBA::AnySeq", generatedBy by: "WriteTypeDefOfSequenceDcl"
//Typedef Sequence declaration: CORBA::AnySeq
type CorbaAnySeq []__goidl__.IdlAny

//noinspection GoSnakeCaseUsage
type CorbaAnySeq_Helper struct {
}

//noinspection GoSnakeCaseUsage
const CorbaAnySeqId_Const = "IDL:omg.org/CORBA/AnySeq:1.0"

func (self CorbaAnySeq_Helper) Id() string {
	return CorbaAnySeqId_Const
}

// WriteTypeDefOfSequenceDcl::WriteExtract
func (self CorbaAnySeq_Helper) Read(stream __goidl__.IReadAny) (CorbaAnySeq, error) {
	n, err := __goidl__.IdlUInt32Helper.Read(stream)
	if err != nil {
		return nil, err
	}
	if n > 0 {
		result := make(CorbaAnySeq, n)
		var i uint32
		for i = 0; i < n; i++ {
			result[i], err = __goidl__.IdlAnyHelper.Read(stream)
			if err != nil {
				return nil, err
			}
		}
		return result, nil
	}
	return nil, nil
}

func (self CorbaAnySeq_Helper) Write(stream __goidl__.IWriteAny, v CorbaAnySeq) error {
	if v == nil {
		return __goidl__.IdlUInt32Helper.Write(stream, 0)
	}
	err := __goidl__.IdlUInt32Helper.Write(stream, uint32(len(v)))
	if err != nil {
		return nil
	}
	for _, item := range v {
			err = __goidl__.IdlAnyHelper.Write(stream, item)
		if err != nil {
			return err
		}
	}
	return err
}

// TypeDef declaration: "CORBA::BooleanSeq", generatedBy by: "WriteTypeDefOfSequenceDcl"
//Typedef Sequence declaration: CORBA::BooleanSeq
type CorbaBooleanSeq []bool

//noinspection GoSnakeCaseUsage
type CorbaBooleanSeq_Helper struct {
}

//noinspection GoSnakeCaseUsage
const CorbaBooleanSeqId_Const = "IDL:omg.org/CORBA/BooleanSeq:1.0"

func (self CorbaBooleanSeq_Helper) Id() string {
	return CorbaBooleanSeqId_Const
}

// WriteTypeDefOfSequenceDcl::WriteExtract
func (self CorbaBooleanSeq_Helper) Read(stream __goidl__.IReadAny) (CorbaBooleanSeq, error) {
	n, err := __goidl__.IdlUInt32Helper.Read(stream)
	if err != nil {
		return nil, err
	}
	if n > 0 {
		result := make(CorbaBooleanSeq, n)
		var i uint32
		for i = 0; i < n; i++ {
			result[i], err = __goidl__.IdlBooleanHelper.Read(stream)
			if err != nil {
				return nil, err
			}
		}
		return result, nil
	}
	return nil, nil
}

func (self CorbaBooleanSeq_Helper) Write(stream __goidl__.IWriteAny, v CorbaBooleanSeq) error {
	if v == nil {
		return __goidl__.IdlUInt32Helper.Write(stream, 0)
	}
	err := __goidl__.IdlUInt32Helper.Write(stream, uint32(len(v)))
	if err != nil {
		return nil
	}
	for _, item := range v {
			err = __goidl__.IdlBooleanHelper.Write(stream, item)
		if err != nil {
			return err
		}
	}
	return err
}

// TypeDef declaration: "CORBA::CharSeq", generatedBy by: "WriteTypeDefOfSequenceDcl"
//Typedef Sequence declaration: CORBA::CharSeq
type CorbaCharSeq []byte

//noinspection GoSnakeCaseUsage
type CorbaCharSeq_Helper struct {
}

//noinspection GoSnakeCaseUsage
const CorbaCharSeqId_Const = "IDL:omg.org/CORBA/CharSeq:1.0"

func (self CorbaCharSeq_Helper) Id() string {
	return CorbaCharSeqId_Const
}

// WriteTypeDefOfSequenceDcl::WriteExtract
func (self CorbaCharSeq_Helper) Read(stream __goidl__.IReadAny) (CorbaCharSeq, error) {
	n, err := __goidl__.IdlUInt32Helper.Read(stream)
	if err != nil {
		return nil, err
	}
	if n > 0 {
		result := make(CorbaCharSeq, n)
		var i uint32
		for i = 0; i < n; i++ {
			result[i], err = __goidl__.IdlOctetHelper.Read(stream)
			if err != nil {
				return nil, err
			}
		}
		return result, nil
	}
	return nil, nil
}

func (self CorbaCharSeq_Helper) Write(stream __goidl__.IWriteAny, v CorbaCharSeq) error {
	if v == nil {
		return __goidl__.IdlUInt32Helper.Write(stream, 0)
	}
	err := __goidl__.IdlUInt32Helper.Write(stream, uint32(len(v)))
	if err != nil {
		return nil
	}
	for _, item := range v {
			err = __goidl__.IdlOctetHelper.Write(stream, item)
		if err != nil {
			return err
		}
	}
	return err
}

// TypeDef declaration: "CORBA::WCharSeq", generatedBy by: "WriteTypeDefOfSequenceDcl"
//Typedef Sequence declaration: CORBA::WCharSeq
type CorbaWCharSeq []rune

//noinspection GoSnakeCaseUsage
type CorbaWCharSeq_Helper struct {
}

//noinspection GoSnakeCaseUsage
const CorbaWCharSeqId_Const = "IDL:omg.org/CORBA/WCharSeq:1.0"

func (self CorbaWCharSeq_Helper) Id() string {
	return CorbaWCharSeqId_Const
}

// WriteTypeDefOfSequenceDcl::WriteExtract
func (self CorbaWCharSeq_Helper) Read(stream __goidl__.IReadAny) (CorbaWCharSeq, error) {
	n, err := __goidl__.IdlUInt32Helper.Read(stream)
	if err != nil {
		return nil, err
	}
	if n > 0 {
		result := make(CorbaWCharSeq, n)
		var i uint32
		for i = 0; i < n; i++ {
			result[i], err = __goidl__.IdlRuneHelper.Read(stream)
			if err != nil {
				return nil, err
			}
		}
		return result, nil
	}
	return nil, nil
}

func (self CorbaWCharSeq_Helper) Write(stream __goidl__.IWriteAny, v CorbaWCharSeq) error {
	if v == nil {
		return __goidl__.IdlUInt32Helper.Write(stream, 0)
	}
	err := __goidl__.IdlUInt32Helper.Write(stream, uint32(len(v)))
	if err != nil {
		return nil
	}
	for _, item := range v {
			err = __goidl__.IdlRuneHelper.Write(stream, item)
		if err != nil {
			return err
		}
	}
	return err
}

// TypeDef declaration: "CORBA::OctetSeq", generatedBy by: "WriteTypeDefOfSequenceDcl"
//Typedef Sequence declaration: CORBA::OctetSeq
type CorbaOctetSeq []byte

//noinspection GoSnakeCaseUsage
type CorbaOctetSeq_Helper struct {
}

//noinspection GoSnakeCaseUsage
const CorbaOctetSeqId_Const = "IDL:omg.org/CORBA/OctetSeq:1.0"

func (self CorbaOctetSeq_Helper) Id() string {
	return CorbaOctetSeqId_Const
}

// WriteTypeDefOfSequenceDcl::WriteExtract
func (self CorbaOctetSeq_Helper) Read(stream __goidl__.IReadAny) (CorbaOctetSeq, error) {
	n, err := __goidl__.IdlUInt32Helper.Read(stream)
	if err != nil {
		return nil, err
	}
	if n > 0 {
		result := make(CorbaOctetSeq, n)
		var i uint32
		for i = 0; i < n; i++ {
			result[i], err = __goidl__.IdlOctetHelper.Read(stream)
			if err != nil {
				return nil, err
			}
		}
		return result, nil
	}
	return nil, nil
}

func (self CorbaOctetSeq_Helper) Write(stream __goidl__.IWriteAny, v CorbaOctetSeq) error {
	if v == nil {
		return __goidl__.IdlUInt32Helper.Write(stream, 0)
	}
	err := __goidl__.IdlUInt32Helper.Write(stream, uint32(len(v)))
	if err != nil {
		return nil
	}
	for _, item := range v {
			err = __goidl__.IdlOctetHelper.Write(stream, item)
		if err != nil {
			return err
		}
	}
	return err
}

// TypeDef declaration: "CORBA::ShortSeq", generatedBy by: "WriteTypeDefOfSequenceDcl"
//Typedef Sequence declaration: CORBA::ShortSeq
type CorbaShortSeq []int16

//noinspection GoSnakeCaseUsage
type CorbaShortSeq_Helper struct {
}

//noinspection GoSnakeCaseUsage
const CorbaShortSeqId_Const = "IDL:omg.org/CORBA/ShortSeq:1.0"

func (self CorbaShortSeq_Helper) Id() string {
	return CorbaShortSeqId_Const
}

// WriteTypeDefOfSequenceDcl::WriteExtract
func (self CorbaShortSeq_Helper) Read(stream __goidl__.IReadAny) (CorbaShortSeq, error) {
	n, err := __goidl__.IdlUInt32Helper.Read(stream)
	if err != nil {
		return nil, err
	}
	if n > 0 {
		result := make(CorbaShortSeq, n)
		var i uint32
		for i = 0; i < n; i++ {
			result[i], err = __goidl__.IdlInt16Helper.Read(stream)
			if err != nil {
				return nil, err
			}
		}
		return result, nil
	}
	return nil, nil
}

func (self CorbaShortSeq_Helper) Write(stream __goidl__.IWriteAny, v CorbaShortSeq) error {
	if v == nil {
		return __goidl__.IdlUInt32Helper.Write(stream, 0)
	}
	err := __goidl__.IdlUInt32Helper.Write(stream, uint32(len(v)))
	if err != nil {
		return nil
	}
	for _, item := range v {
			err = __goidl__.IdlInt16Helper.Write(stream, item)
		if err != nil {
			return err
		}
	}
	return err
}

// TypeDef declaration: "CORBA::UShortSeq", generatedBy by: "WriteTypeDefOfSequenceDcl"
//Typedef Sequence declaration: CORBA::UShortSeq
type CorbaUShortSeq []uint16

//noinspection GoSnakeCaseUsage
type CorbaUShortSeq_Helper struct {
}

//noinspection GoSnakeCaseUsage
const CorbaUShortSeqId_Const = "IDL:omg.org/CORBA/UShortSeq:1.0"

func (self CorbaUShortSeq_Helper) Id() string {
	return CorbaUShortSeqId_Const
}

// WriteTypeDefOfSequenceDcl::WriteExtract
func (self CorbaUShortSeq_Helper) Read(stream __goidl__.IReadAny) (CorbaUShortSeq, error) {
	n, err := __goidl__.IdlUInt32Helper.Read(stream)
	if err != nil {
		return nil, err
	}
	if n > 0 {
		result := make(CorbaUShortSeq, n)
		var i uint32
		for i = 0; i < n; i++ {
			result[i], err = __goidl__.IdlUInt16Helper.Read(stream)
			if err != nil {
				return nil, err
			}
		}
		return result, nil
	}
	return nil, nil
}

func (self CorbaUShortSeq_Helper) Write(stream __goidl__.IWriteAny, v CorbaUShortSeq) error {
	if v == nil {
		return __goidl__.IdlUInt32Helper.Write(stream, 0)
	}
	err := __goidl__.IdlUInt32Helper.Write(stream, uint32(len(v)))
	if err != nil {
		return nil
	}
	for _, item := range v {
			err = __goidl__.IdlUInt16Helper.Write(stream, item)
		if err != nil {
			return err
		}
	}
	return err
}

// TypeDef declaration: "CORBA::LongSeq", generatedBy by: "WriteTypeDefOfSequenceDcl"
//Typedef Sequence declaration: CORBA::LongSeq
type CorbaLongSeq []int32

//noinspection GoSnakeCaseUsage
type CorbaLongSeq_Helper struct {
}

//noinspection GoSnakeCaseUsage
const CorbaLongSeqId_Const = "IDL:omg.org/CORBA/LongSeq:1.0"

func (self CorbaLongSeq_Helper) Id() string {
	return CorbaLongSeqId_Const
}

// WriteTypeDefOfSequenceDcl::WriteExtract
func (self CorbaLongSeq_Helper) Read(stream __goidl__.IReadAny) (CorbaLongSeq, error) {
	n, err := __goidl__.IdlUInt32Helper.Read(stream)
	if err != nil {
		return nil, err
	}
	if n > 0 {
		result := make(CorbaLongSeq, n)
		var i uint32
		for i = 0; i < n; i++ {
			result[i], err = __goidl__.IdlInt32Helper.Read(stream)
			if err != nil {
				return nil, err
			}
		}
		return result, nil
	}
	return nil, nil
}

func (self CorbaLongSeq_Helper) Write(stream __goidl__.IWriteAny, v CorbaLongSeq) error {
	if v == nil {
		return __goidl__.IdlUInt32Helper.Write(stream, 0)
	}
	err := __goidl__.IdlUInt32Helper.Write(stream, uint32(len(v)))
	if err != nil {
		return nil
	}
	for _, item := range v {
			err = __goidl__.IdlInt32Helper.Write(stream, item)
		if err != nil {
			return err
		}
	}
	return err
}

// TypeDef declaration: "CORBA::ULongSeq", generatedBy by: "WriteTypeDefOfSequenceDcl"
//Typedef Sequence declaration: CORBA::ULongSeq
type CorbaULongSeq []uint32

//noinspection GoSnakeCaseUsage
type CorbaULongSeq_Helper struct {
}

//noinspection GoSnakeCaseUsage
const CorbaULongSeqId_Const = "IDL:omg.org/CORBA/ULongSeq:1.0"

func (self CorbaULongSeq_Helper) Id() string {
	return CorbaULongSeqId_Const
}

// WriteTypeDefOfSequenceDcl::WriteExtract
func (self CorbaULongSeq_Helper) Read(stream __goidl__.IReadAny) (CorbaULongSeq, error) {
	n, err := __goidl__.IdlUInt32Helper.Read(stream)
	if err != nil {
		return nil, err
	}
	if n > 0 {
		result := make(CorbaULongSeq, n)
		var i uint32
		for i = 0; i < n; i++ {
			result[i], err = __goidl__.IdlUInt32Helper.Read(stream)
			if err != nil {
				return nil, err
			}
		}
		return result, nil
	}
	return nil, nil
}

func (self CorbaULongSeq_Helper) Write(stream __goidl__.IWriteAny, v CorbaULongSeq) error {
	if v == nil {
		return __goidl__.IdlUInt32Helper.Write(stream, 0)
	}
	err := __goidl__.IdlUInt32Helper.Write(stream, uint32(len(v)))
	if err != nil {
		return nil
	}
	for _, item := range v {
			err = __goidl__.IdlUInt32Helper.Write(stream, item)
		if err != nil {
			return err
		}
	}
	return err
}

// TypeDef declaration: "CORBA::LongLongSeq", generatedBy by: "WriteTypeDefOfSequenceDcl"
//Typedef Sequence declaration: CORBA::LongLongSeq
type CorbaLongLongSeq []int64

//noinspection GoSnakeCaseUsage
type CorbaLongLongSeq_Helper struct {
}

//noinspection GoSnakeCaseUsage
const CorbaLongLongSeqId_Const = "IDL:omg.org/CORBA/LongLongSeq:1.0"

func (self CorbaLongLongSeq_Helper) Id() string {
	return CorbaLongLongSeqId_Const
}

// WriteTypeDefOfSequenceDcl::WriteExtract
func (self CorbaLongLongSeq_Helper) Read(stream __goidl__.IReadAny) (CorbaLongLongSeq, error) {
	n, err := __goidl__.IdlUInt32Helper.Read(stream)
	if err != nil {
		return nil, err
	}
	if n > 0 {
		result := make(CorbaLongLongSeq, n)
		var i uint32
		for i = 0; i < n; i++ {
			result[i], err = __goidl__.IdlInt64Helper.Read(stream)
			if err != nil {
				return nil, err
			}
		}
		return result, nil
	}
	return nil, nil
}

func (self CorbaLongLongSeq_Helper) Write(stream __goidl__.IWriteAny, v CorbaLongLongSeq) error {
	if v == nil {
		return __goidl__.IdlUInt32Helper.Write(stream, 0)
	}
	err := __goidl__.IdlUInt32Helper.Write(stream, uint32(len(v)))
	if err != nil {
		return nil
	}
	for _, item := range v {
			err = __goidl__.IdlInt64Helper.Write(stream, item)
		if err != nil {
			return err
		}
	}
	return err
}

// TypeDef declaration: "CORBA::ULongLongSeq", generatedBy by: "WriteTypeDefOfSequenceDcl"
//Typedef Sequence declaration: CORBA::ULongLongSeq
type CorbaULongLongSeq []uint64

//noinspection GoSnakeCaseUsage
type CorbaULongLongSeq_Helper struct {
}

//noinspection GoSnakeCaseUsage
const CorbaULongLongSeqId_Const = "IDL:omg.org/CORBA/ULongLongSeq:1.0"

func (self CorbaULongLongSeq_Helper) Id() string {
	return CorbaULongLongSeqId_Const
}

// WriteTypeDefOfSequenceDcl::WriteExtract
func (self CorbaULongLongSeq_Helper) Read(stream __goidl__.IReadAny) (CorbaULongLongSeq, error) {
	n, err := __goidl__.IdlUInt32Helper.Read(stream)
	if err != nil {
		return nil, err
	}
	if n > 0 {
		result := make(CorbaULongLongSeq, n)
		var i uint32
		for i = 0; i < n; i++ {
			result[i], err = __goidl__.IdlUInt64Helper.Read(stream)
			if err != nil {
				return nil, err
			}
		}
		return result, nil
	}
	return nil, nil
}

func (self CorbaULongLongSeq_Helper) Write(stream __goidl__.IWriteAny, v CorbaULongLongSeq) error {
	if v == nil {
		return __goidl__.IdlUInt32Helper.Write(stream, 0)
	}
	err := __goidl__.IdlUInt32Helper.Write(stream, uint32(len(v)))
	if err != nil {
		return nil
	}
	for _, item := range v {
			err = __goidl__.IdlUInt64Helper.Write(stream, item)
		if err != nil {
			return err
		}
	}
	return err
}

// TypeDef declaration: "CORBA::FloatSeq", generatedBy by: "WriteTypeDefOfSequenceDcl"
//Typedef Sequence declaration: CORBA::FloatSeq
type CorbaFloatSeq []float32

//noinspection GoSnakeCaseUsage
type CorbaFloatSeq_Helper struct {
}

//noinspection GoSnakeCaseUsage
const CorbaFloatSeqId_Const = "IDL:omg.org/CORBA/FloatSeq:1.0"

func (self CorbaFloatSeq_Helper) Id() string {
	return CorbaFloatSeqId_Const
}

// WriteTypeDefOfSequenceDcl::WriteExtract
func (self CorbaFloatSeq_Helper) Read(stream __goidl__.IReadAny) (CorbaFloatSeq, error) {
	n, err := __goidl__.IdlUInt32Helper.Read(stream)
	if err != nil {
		return nil, err
	}
	if n > 0 {
		result := make(CorbaFloatSeq, n)
		var i uint32
		for i = 0; i < n; i++ {
			result[i], err = __goidl__.IdlFloat32Helper.Read(stream)
			if err != nil {
				return nil, err
			}
		}
		return result, nil
	}
	return nil, nil
}

func (self CorbaFloatSeq_Helper) Write(stream __goidl__.IWriteAny, v CorbaFloatSeq) error {
	if v == nil {
		return __goidl__.IdlUInt32Helper.Write(stream, 0)
	}
	err := __goidl__.IdlUInt32Helper.Write(stream, uint32(len(v)))
	if err != nil {
		return nil
	}
	for _, item := range v {
			err = __goidl__.IdlFloat32Helper.Write(stream, item)
		if err != nil {
			return err
		}
	}
	return err
}

// TypeDef declaration: "CORBA::DoubleSeq", generatedBy by: "WriteTypeDefOfSequenceDcl"
//Typedef Sequence declaration: CORBA::DoubleSeq
type CorbaDoubleSeq []float64

//noinspection GoSnakeCaseUsage
type CorbaDoubleSeq_Helper struct {
}

//noinspection GoSnakeCaseUsage
const CorbaDoubleSeqId_Const = "IDL:omg.org/CORBA/DoubleSeq:1.0"

func (self CorbaDoubleSeq_Helper) Id() string {
	return CorbaDoubleSeqId_Const
}

// WriteTypeDefOfSequenceDcl::WriteExtract
func (self CorbaDoubleSeq_Helper) Read(stream __goidl__.IReadAny) (CorbaDoubleSeq, error) {
	n, err := __goidl__.IdlUInt32Helper.Read(stream)
	if err != nil {
		return nil, err
	}
	if n > 0 {
		result := make(CorbaDoubleSeq, n)
		var i uint32
		for i = 0; i < n; i++ {
			result[i], err = __goidl__.IdlFloat64Helper.Read(stream)
			if err != nil {
				return nil, err
			}
		}
		return result, nil
	}
	return nil, nil
}

func (self CorbaDoubleSeq_Helper) Write(stream __goidl__.IWriteAny, v CorbaDoubleSeq) error {
	if v == nil {
		return __goidl__.IdlUInt32Helper.Write(stream, 0)
	}
	err := __goidl__.IdlUInt32Helper.Write(stream, uint32(len(v)))
	if err != nil {
		return nil
	}
	for _, item := range v {
			err = __goidl__.IdlFloat64Helper.Write(stream, item)
		if err != nil {
			return err
		}
	}
	return err
}

// TypeDef declaration: "CORBA::LongDoubleSeq", generatedBy by: "WriteTypeDefOfSequenceDcl"
//Typedef Sequence declaration: CORBA::LongDoubleSeq
type CorbaLongDoubleSeq []float64

//noinspection GoSnakeCaseUsage
type CorbaLongDoubleSeq_Helper struct {
}

//noinspection GoSnakeCaseUsage
const CorbaLongDoubleSeqId_Const = "IDL:omg.org/CORBA/LongDoubleSeq:1.0"

func (self CorbaLongDoubleSeq_Helper) Id() string {
	return CorbaLongDoubleSeqId_Const
}

// WriteTypeDefOfSequenceDcl::WriteExtract
func (self CorbaLongDoubleSeq_Helper) Read(stream __goidl__.IReadAny) (CorbaLongDoubleSeq, error) {
	n, err := __goidl__.IdlUInt32Helper.Read(stream)
	if err != nil {
		return nil, err
	}
	if n > 0 {
		result := make(CorbaLongDoubleSeq, n)
		var i uint32
		for i = 0; i < n; i++ {
			result[i], err = __goidl__.IdlFloat64Helper.Read(stream)
			if err != nil {
				return nil, err
			}
		}
		return result, nil
	}
	return nil, nil
}

func (self CorbaLongDoubleSeq_Helper) Write(stream __goidl__.IWriteAny, v CorbaLongDoubleSeq) error {
	if v == nil {
		return __goidl__.IdlUInt32Helper.Write(stream, 0)
	}
	err := __goidl__.IdlUInt32Helper.Write(stream, uint32(len(v)))
	if err != nil {
		return nil
	}
	for _, item := range v {
			err = __goidl__.IdlFloat64Helper.Write(stream, item)
		if err != nil {
			return err
		}
	}
	return err
}

// TypeDef declaration: "CORBA::StringSeq", generatedBy by: "WriteTypeDefOfSequenceDcl"
//Typedef Sequence declaration: CORBA::StringSeq
type CorbaStringSeq []string

//noinspection GoSnakeCaseUsage
type CorbaStringSeq_Helper struct {
}

//noinspection GoSnakeCaseUsage
const CorbaStringSeqId_Const = "IDL:omg.org/CORBA/StringSeq:1.0"

func (self CorbaStringSeq_Helper) Id() string {
	return CorbaStringSeqId_Const
}

// WriteTypeDefOfSequenceDcl::WriteExtract
func (self CorbaStringSeq_Helper) Read(stream __goidl__.IReadAny) (CorbaStringSeq, error) {
	n, err := __goidl__.IdlUInt32Helper.Read(stream)
	if err != nil {
		return nil, err
	}
	if n > 0 {
		result := make(CorbaStringSeq, n)
		var i uint32
		for i = 0; i < n; i++ {
			result[i], err = __goidl__.IdlStringHelper.Read(stream)
			if err != nil {
				return nil, err
			}
		}
		return result, nil
	}
	return nil, nil
}

func (self CorbaStringSeq_Helper) Write(stream __goidl__.IWriteAny, v CorbaStringSeq) error {
	if v == nil {
		return __goidl__.IdlUInt32Helper.Write(stream, 0)
	}
	err := __goidl__.IdlUInt32Helper.Write(stream, uint32(len(v)))
	if err != nil {
		return nil
	}
	for _, item := range v {
			err = __goidl__.IdlStringHelper.Write(stream, item)
		if err != nil {
			return err
		}
	}
	return err
}

// TypeDef declaration: "CORBA::WStringSeq", generatedBy by: "WriteTypeDefOfSequenceDcl"
//Typedef Sequence declaration: CORBA::WStringSeq
type CorbaWStringSeq []string

//noinspection GoSnakeCaseUsage
type CorbaWStringSeq_Helper struct {
}

//noinspection GoSnakeCaseUsage
const CorbaWStringSeqId_Const = "IDL:omg.org/CORBA/WStringSeq:1.0"

func (self CorbaWStringSeq_Helper) Id() string {
	return CorbaWStringSeqId_Const
}

// WriteTypeDefOfSequenceDcl::WriteExtract
func (self CorbaWStringSeq_Helper) Read(stream __goidl__.IReadAny) (CorbaWStringSeq, error) {
	n, err := __goidl__.IdlUInt32Helper.Read(stream)
	if err != nil {
		return nil, err
	}
	if n > 0 {
		result := make(CorbaWStringSeq, n)
		var i uint32
		for i = 0; i < n; i++ {
			result[i], err = __goidl__.IdlWideStringHelper.Read(stream)
			if err != nil {
				return nil, err
			}
		}
		return result, nil
	}
	return nil, nil
}

func (self CorbaWStringSeq_Helper) Write(stream __goidl__.IWriteAny, v CorbaWStringSeq) error {
	if v == nil {
		return __goidl__.IdlUInt32Helper.Write(stream, 0)
	}
	err := __goidl__.IdlUInt32Helper.Write(stream, uint32(len(v)))
	if err != nil {
		return nil
	}
	for _, item := range v {
			err = __goidl__.IdlWideStringHelper.Write(stream, item)
		if err != nil {
			return err
		}
	}
	return err
}

// Exception declaration: "CORBA::BadFixedValue", generatedBy by: "WriteStructDcl"
// Exception Decl: true
type CorbaBadFixedValue struct {
	__goidl__.IdlObject
	Offset uint32 `json:"Offset"`
}

//noinspection GoSnakeCaseUsage
const CorbaBadFixedValueId_Const = "IDL:omg.org/CORBA/BadFixedValue:1.0"

//noinspection GoUnusedExportedFunction
func NewDefaultCorbaBadFixedValue() *CorbaBadFixedValue {
	//noinspection GoRedundantConversion
	return &CorbaBadFixedValue{
		IdlObject: __goidl__.IdlObject{
			Id: CorbaBadFixedValueId_Const,
		},
		// "StructDclDefaultConstructorMemberDefaultValueService", MemberName: "offset", Type: "IdlUnsignedLong" Scope: "UnsignedLongType"
		Offset: 0,
	}
}

//noinspection GoUnusedExportedFunction
func NewCorbaBadFixedValue(
	//"StructDclAllParamsConstructorParamService"
	Offset uint32) *CorbaBadFixedValue {
	//noinspection GoRedundantConversion
	return &CorbaBadFixedValue{
		IdlObject: __goidl__.IdlObject{
			Id: CorbaBadFixedValueId_Const,
		},
		Offset: Offset,
	}
}

//noinspection GoUnusedExportedFunction
func NewRandomCorbaBadFixedValue(randomGenerator __goidl__.IRandomDataGenerator) *CorbaBadFixedValue {
	//noinspection GoRedundantConversion
	return &CorbaBadFixedValue{
		IdlObject: __goidl__.IdlObject{
			Id: CorbaBadFixedValueId_Const,
		},
		// "StructDclDefaultConstructorMemberDefaultValueService", MemberName: "offset", Type: "IdlUnsignedLong" Scope: "UnsignedLongType"
		Offset: randomGenerator.UnsignedLongTypeValue(__reflect__.TypeOf((*CorbaBadFixedValue)(nil)), "Offset"),
	}
}

func (self *CorbaBadFixedValue) String() string {
	b, err := __json__.Marshal(self)
	if err != nil {
		return ""
	}
	return string(b)
}

func (self *CorbaBadFixedValue) Error() string{
	return 	__fmt__.Sprintf("Error of type CorbaBadFixedValue(%v)", self.String())
}
func (self *CorbaBadFixedValue) GoString() string {
	return self.String()
}

func (self *CorbaBadFixedValue) ReadValue(stream __goidl__.IReadAny) error {
	var err error
	err = self.IdlObject.ReadValue(stream)
	if err != nil {
		return err
	}
	// WriteStructHelper::WriteStructMemberExtractValue(UnsignedLongType)
	self.Offset, err = __goidl__.IdlUInt32Helper.Read(stream)
	if err != nil {
		return err
	}
	return nil
}

func (self *CorbaBadFixedValue) Read(stream __goidl__.IReadAny) error {
	err := self.ReadValue(stream)
	if err != nil {
		return err
	}
	return nil
}

func (self *CorbaBadFixedValue) Write(stream __goidl__.IWriteAny) error {
	var err error
	err = self.IdlObject.Write(stream)
	if err != nil {
		return err
	}
	// WriteStructHelper::WriteStructMemberInsert(UnsignedLongType)
	err = __goidl__.IdlUInt32Helper.Write(stream, self.Offset)
	if err != nil {
		return err
	}
	return nil
}

//noinspection GoSnakeCaseUsage
type CorbaBadFixedValue_Helper struct {
}


//noinspection GoUnusedGlobalVariable
var CorbaAnySeqHelper = CorbaAnySeq_Helper{}

//noinspection GoUnusedGlobalVariable
var CorbaBooleanSeqHelper = CorbaBooleanSeq_Helper{}

//noinspection GoUnusedGlobalVariable
var CorbaCharSeqHelper = CorbaCharSeq_Helper{}

//noinspection GoUnusedGlobalVariable
var CorbaWCharSeqHelper = CorbaWCharSeq_Helper{}

//noinspection GoUnusedGlobalVariable
var CorbaOctetSeqHelper = CorbaOctetSeq_Helper{}

//noinspection GoUnusedGlobalVariable
var CorbaShortSeqHelper = CorbaShortSeq_Helper{}

//noinspection GoUnusedGlobalVariable
var CorbaUShortSeqHelper = CorbaUShortSeq_Helper{}

//noinspection GoUnusedGlobalVariable
var CorbaLongSeqHelper = CorbaLongSeq_Helper{}

//noinspection GoUnusedGlobalVariable
var CorbaULongSeqHelper = CorbaULongSeq_Helper{}

//noinspection GoUnusedGlobalVariable
var CorbaLongLongSeqHelper = CorbaLongLongSeq_Helper{}

//noinspection GoUnusedGlobalVariable
var CorbaULongLongSeqHelper = CorbaULongLongSeq_Helper{}

//noinspection GoUnusedGlobalVariable
var CorbaFloatSeqHelper = CorbaFloatSeq_Helper{}

//noinspection GoUnusedGlobalVariable
var CorbaDoubleSeqHelper = CorbaDoubleSeq_Helper{}

//noinspection GoUnusedGlobalVariable
var CorbaLongDoubleSeqHelper = CorbaLongDoubleSeq_Helper{}

//noinspection GoUnusedGlobalVariable
var CorbaStringSeqHelper = CorbaStringSeq_Helper{}

//noinspection GoUnusedGlobalVariable
var CorbaWStringSeqHelper = CorbaWStringSeq_Helper{}

//noinspection GoUnusedGlobalVariable
var CorbaBadFixedValueHelper = CorbaBadFixedValue_Helper{}

func init() {
	__goidl__.AddRegistration(
		__goidl__.NewRegistrationInformation(
			CorbaBadFixedValueId_Const,
			__yaccidl__.IdlStruct,
			"CORBA_Stream.idl.go",
			func() __goidl__.IIdlObject {
				return NewDefaultCorbaBadFixedValue()
			},
			func(generator __goidl__.IRandomDataGenerator) __goidl__.IIdlObject {
				return NewRandomCorbaBadFixedValue(generator)
			},
			__reflect__.TypeOf((*CorbaBadFixedValue)(nil))))
}
